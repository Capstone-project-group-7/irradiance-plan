"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const uri = require("url");
const util = require("util");
const deps_1 = require("./deps");
const pjson = require('../package.json');
const debug = require('debug')('http');
const debugHeaders = require('debug')('http:headers');
const debugBody = require('debug')('http:body');
function concat(stream) {
    return new Promise(resolve => {
        let strings = [];
        stream.on('data', data => strings.push(data));
        stream.on('end', () => resolve(strings.join('')));
    });
}
function caseInsensitiveObject() {
    let lowercaseKey = (k) => (typeof k === 'string' ? k.toLowerCase() : k);
    return new Proxy({}, {
        get: (t, k) => {
            k = lowercaseKey(k);
            return t[k];
        },
        set: (t, k, v) => {
            k = lowercaseKey(k);
            t[k] = v;
            return true;
        },
        deleteProperty: (t, k) => {
            k = lowercaseKey(k);
            if (k in t)
                return false;
            return delete t[k];
        },
        has: (t, k) => {
            k = lowercaseKey(k);
            return k in t;
        },
    });
}
function lowercaseHeaders(headers) {
    let newHeaders = caseInsensitiveObject();
    for (let k of Object.keys(headers)) {
        if (!headers[k] && headers[k] !== '')
            continue;
        newHeaders[k] = headers[k];
    }
    return newHeaders;
}
/**
 * Utility for simple HTTP calls
 * @class
 */
class HTTP {
    constructor(url, options = {}) {
        this._redirectRetries = 0;
        this._errorRetries = 0;
        const userAgent = (global['http-call'] && global['http-call'].userAgent && global['http-call'].userAgent) ||
            `${pjson.name}/${pjson.version} node-${process.version}`;
        this.options = Object.assign({}, this.ctor.defaults, options, { headers: lowercaseHeaders(Object.assign({ 'user-agent': userAgent }, this.ctor.defaults.headers, options.headers)) });
        if (!url)
            throw new Error('no url provided');
        this.url = url;
        if (this.options.body)
            this._parseBody(this.options.body);
    }
    static create(options = {}) {
        const defaults = this.defaults;
        return _a = class CustomHTTP extends HTTP {
            },
            _a.defaults = Object.assign({}, defaults, options),
            _a;
        var _a;
    }
    /**
     * make an http GET request
     * @param {string} url - url or path to call
     * @param {HTTPRequestOptions} options
     * @returns {Promise}
     * @example
     * ```js
     * const http = require('http-call')
     * await http.get('https://google.com')
     * ```
     */
    static get(url, options = {}) {
        return this.request(url, Object.assign({}, options, { method: 'GET' }));
    }
    /**
     * make an http POST request
     * @param {string} url - url or path to call
     * @param {HTTPRequestOptions} options
     * @returns {Promise}
     * @example
     * ```js
     * const http = require('http-call')
     * await http.post('https://google.com')
     * ```
     */
    static post(url, options = {}) {
        return this.request(url, Object.assign({}, options, { method: 'POST' }));
    }
    /**
     * make an http PUT request
     * @param {string} url - url or path to call
     * @param {HTTPRequestOptions} options
     * @returns {Promise}
     * @example
     * ```js
     * const http = require('http-call')
     * await http.put('https://google.com')
     * ```
     */
    static put(url, options = {}) {
        re