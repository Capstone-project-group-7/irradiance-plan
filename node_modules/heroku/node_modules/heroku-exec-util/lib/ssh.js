'use strict'

const child = require('child_process');
const cli = require('heroku-cli-util');
const co = require('co');
const Client = require('ssh2').Client;
const https = require('https')
const url = require('url');
const tty = require('tty')
const stream = require('stream')
const fs = require('fs')
const socks = require('@heroku/socksv5');
const progress = require('smooth-progress')
const temp = require('temp')

function connect(context, addonHost, dynoUser, privateKey, callback) {
  return new Promise((resolve, reject) => {
    var conn = new Client();
    cli.hush("[cli-ssh] created")
    conn.on('ready', function() {
      cli.hush("[cli-ssh] ready")
      cli.action.done('up')
      if (context.args.length > 0 && context.args != 'bash') {
        let cmd = _buildCommand(context.args)
        cli.hush(`[cli-ssh] command: ${cmd}`)
        conn.exec(cmd, function(err, stream) {
          cli.hush("[cli-ssh] exec")
          if (err) {
            cli.hush(`[cli-ssh] err: ${err}`)
            throw err;
          }
          stream.on('close', function(code, signal) {
            cli.hush("[cli-ssh] close")
            conn.end();
            resolve();
            if (callback) callback();
          })
          .on('data', _readData(stream))
          .on('error', reject);
          process.once('SIGINT', () => conn.end())
        });
      } else {
        cli.hush("[cli-ssh] bash")
        conn.shell(function(err, stream) {
          cli.hush("[cli-ssh] shell")
          if (err) {
            cli.hush(`[cli-ssh] err: ${err}`)
            return _logConnectionError(err);
          }
          stream.on('close', function() {
            cli.hush("[cli-ssh] close")
            conn.end();
            resolve();
          })
          .on('data', _readData(stream))
          .on('error', function (err) {
            cli.hush(err)
            cli.error("There was a networking error! Please try connecting again.")
            reject
          })
          process.once('SIGINT', () => conn.end())
        });
   